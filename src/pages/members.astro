---
import { sortMembersByTeam } from "../scripts/sortTeams.ts";

import "../styles/global.css";
import "../styles/members.css";
import { fetchMembers } from "../scripts/serveMembers";
import Layout from "../layouts/layout.astro";
import TeamDisplayLeft from "../components/TeamDisplayLeft.astro";
import TeamDisplayRight from "../components/TeamDisplayRight.astro";
import ProjectTeam from "../components/ProjectTeam.tsx";

// Import the TeamDropdown component
import TeamDropdown from "../components/TeamDropdown";
import type { TeamDescriptions } from "../types/teamDescriptions";
import { serveTeamDescriptions } from "../scripts/serveTeamDescriptions";
import type { memberData } from "../types/memberData";

type Team = {
  teamName: string;
  members: memberData[];
  description: string | undefined;
};

let members = await fetchMembers();

let { teamsDict, projects } = sortMembersByTeam(members);

let teamDescription: TeamDescriptions[] = await serveTeamDescriptions();

function mapTeamWithDesc(
  teams: { [teamName: string]: memberData[] },
  teamDescription: TeamDescriptions[],
) {
  return Object.keys(teams)
    .map((teamName) => {
      const description = teamDescription.find(
        (desc: TeamDescriptions) => desc.name === teamName,
      );
      if (description) {
        return {
          teamName,
          members: teams[teamName],
          description: description.description,
        };
      }
      return null;
    })
    .filter(Boolean);
}

let teamWithDesc: (Team | null)[] = mapTeamWithDesc(teamsDict, teamDescription);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>Team Display</title>
  </head>
  <body>
    <section class="section-background">
      <Layout>
        <div class="team-dropdown-container">
          <TeamDropdown client:only="react" />
        </div>

        <div class="nav" id="desktop-nav">
          <button class="lead-button"
            ><a href="#leadership-section">LEADERSHIP</a></button
          >
          <button class="com-button"
            ><a href="#communications-section">COMMUNICATIONS</a></button
          >
          <button class="proj-button"
            ><a href="#projects-section">PROJECTS</a></button
          >
        </div>

        {
          teamWithDesc.map((team: Team | null, index: number) =>
            team ? (
              index % 2 === 0 ? (
                <TeamDisplayLeft
                  teamName={team.teamName}
                  team={team.members}
                  teamDescription={team.description}
                />
              ) : (
                <TeamDisplayRight
                  teamName={team.teamName}
                  team={team.members}
                  teamDescription={team.description}
                />
              )
            ) : null,
          )
        }

        <ProjectTeam client:only="react" projects={projects} />
      </Layout>
    </section>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const savedTeam = localStorage.getItem("selectedTeam");

        if (savedTeam) {
          showTeamSection(savedTeam); // Show the previously selected team section
        }
      });
      function showTeamSection(team: string) {
        // Hide all sections
        document.querySelectorAll(".team-section").forEach((section) => {
          (section as HTMLElement).style.display = "none";
        });

        // Show the selected team section
        const teamSection = document.getElementById(`${team}-section`);
        if (teamSection) {
          (teamSection as HTMLElement).style.display = "block";
        }
      }
    </script>
  </body>
</html>
